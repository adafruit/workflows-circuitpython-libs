# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries
#
# SPDX-License-Identifier: MIT

name: 'Build CI'
description: 'Build CI used for pushes and pull requests'
inputs:
  python-version:
    description: 'The version of Python to use in the CI'
    required: true
    default: '3.11'
  package-prefix:
    description: |
      The prefix (or name) of your package (if applicable) to use
      for GitHub releases
    required: true
    default: ""
  ignore-bundles:
    description: |
      A comma and space separated list of bundles to be skipped when building.
      Valid options are py, mpy, example, and json.  For example, to skip
      building the MPY and example bundles, this field would be: mpy, example
    required: true
    default: ""
runs:
  using: "composite"
  steps:
  - name: Translate Repo Name For Build Tools filename_prefix
    id: repo-name
    shell: bash
    run: |
      echo repo-name=$(
      echo ${{ github.repository }} |
      awk -F '\/' '{ print tolower($2) }' |
      tr '_' '-'
      ) >> $GITHUB_OUTPUT
  - name: Set up Python 3.11
    uses: actions/setup-python@v5
    with:
      python-version: ${{ inputs.python-version }}
  - name: Versions
    shell: bash
    run: |
      python3 --version
  - name: Checkout Current Repo
    uses: actions/checkout@v4
    with:
      submodules: true
      show-progress: false
  - name: Checkout tools repo
    uses: actions/checkout@v4
    with:
      show-progress: false
      repository: adafruit/actions-ci-circuitpython-libs
      path: actions-ci
  - name: Install dependencies
    # (e.g. - apt-get: gettext, etc; pip: circuitpython-build-tools, requirements.txt; etc.)
    shell: bash
    run: |
      source actions-ci/install.sh
  - name: Pip install Sphinx, pre-commit
    shell: bash
    run: |
      pip install --force-reinstall Sphinx sphinx-rtd-theme pre-commit
  - name: Library version
    shell: bash
    run: git describe --dirty --always --tags
  - name: Setup problem matchers
    uses: adafruit/circuitpython-action-library-ci-problem-matchers@v1
  - name: Print pre-commit hook versions
    shell: bash
    run: |
      python actions-ci/print_precommit_versions.py
  - name: Pre-commit hooks
    shell: bash
    run: |
      pre-commit run --all-files --show-diff-on-failure
  - name: Run pytest
    shell: bash
    run: |
      if [[ -d tests ]]; then
        pip install pytest
        python -m pytest  # This syntax adds the library to the path
      fi
  - name: Add the given package filename_prefix
    id: package-prefix-arg
    shell: bash
    run: |
      if [ "${{ inputs.package-prefix }}" == "" ]; then
        echo prefix-arg="" >> $GITHUB_OUTPUT
      else
        echo prefix-arg="--package_folder_prefix ${{ inputs.package-prefix }}" >> $GITHUB_OUTPUT
      fi
  - name: Add the given bundle ignores
    id: ignore-bundles-arg
    shell: bash
    run: |
      if [ "${{ inputs.ignore-bundles }}" == "" ]; then
        echo ignore-bundles="" >> $GITHUB_OUTPUT
      else
        echo ignore-bundles='--ignore "${{ inputs.ignore-bundles }}"' >> $GITHUB_OUTPUT
      fi
  - name: Build assets
    shell: bash
    run: |
      circuitpython-build-bundles \
      --filename_prefix ${{ steps.repo-name.outputs.repo-name }} \
      --library_location . \
      ${{ steps.package-prefix-arg.outputs.prefix-arg }} \
      ${{ steps.ignore-bundles-arg.outputs.ignore-bundles }}
  - name: Archive bundles
    uses: actions/upload-artifact@v4
    with:
      name: bundles
      path: ${{ github.workspace }}/bundles/
  - name: Check for docs folder
    id: need-docs
    shell: bash
    run: |
      echo docs=$( find . -wholename './docs' ) >> $GITHUB_OUTPUT
  - name: Build docs
    if: contains(steps.need-docs.outputs.docs, 'docs')
    working-directory: docs
    shell: bash
    run: sphinx-build -E -W -b html . _build/html
  - name: Check For pyproject.toml
    id: need-pypi
    shell: bash
    run: |
      echo pyproject-toml=$( find . -wholename './pyproject.toml' ) >> $GITHUB_OUTPUT
  - name: Check packaging information
    if: contains(steps.need-pypi.outputs.pyproject-toml, 'pyproject.toml')
    shell: bash
    run: python actions-ci/check_lib_packaging.py
  - name: Build Python package
    if: contains(steps.need-pypi.outputs.pyproject-toml, 'pyproject.toml')
    shell: bash
    run: |
      pip install --upgrade build twine
      find -type f -not -path "./.*" -not -path "./docs*" \( -name "*.py" -o -name "*.toml" \) -exec sed -i -e "s/0.0.0+auto.0/1.2.3/" {} +
      python -m build
      twine check dist/*
